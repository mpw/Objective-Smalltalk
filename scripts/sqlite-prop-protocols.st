#!/usr/local/bin/stsh
#-sqlite:<ref>dbref

framework:FMDB load.

class ColumnInfo {
	var name.
	var type.
    -description {
		"Column: {var:self/name} type: {var:self/type}".
    }
}

class TableInfo  {
	var name.
	var columns.
    -description {
		cd := self columns description.
        "Table {var:self/name} columns: {cd}".
    }
}

scheme SQLiteScheme  {
  var db.

  -initWithPath: dbPath {
     self setDb:(FMDatabase databaseWithPath:dbPath).
     self db open.
     self.
  }

  -dictionariesForResultSet:resultSet
  {
    results := NSMutableArray array.
    { resultSet next } whileTrue: { results addObject:resultSet resultDictionary. }.
    results.
  }

  -dictionariesForQuery:query {
     self dictionariesForResultSet:(self db executeQuery:query).
  }

  /. { 
     |= {
       resultSet := self dictionariesForQuery: 'select name from sqlite_master where [type] = "table" '.
       names := resultSet collect at:'name'.
       names := names, 'schema'.
       self listForNames:names.
     }
  }


  /schema/:table {
     |= {
        resultSet := self dictionariesForQuery: "PRAGMA table_info({table})".
	    columns := resultSet collect: { :colDict | 
            #ColumnInfo{
				#name : (colDict at:'name') ,
				#type : (colDict at:'type')
			}.
        }.
        #TableInfo{ #name : table, #columns : columns }.
     }
  } 

  /schema {
	|= { 
		self tables.
	}
  }

  /:table/count { 
     |= { self dictionariesForQuery: "select count(*) from {table}" | firstObject | at:'count(*)'. }
  }

  /:table/:index { 
     |= { self dictionariesForQuery: "select * from {table}" | at: index. }
  }

  /:table { 
     |= { self dictionariesForQuery: "select * from {table}". }
  }

  /:table/:column/:index { 
     |= { self dictionariesForQuery: "select * from {table}" | at: index.  }
  }

  /:table/where/:column/:value { 
     |= { self dictionariesForQuery: "select * from {table} where {column} = {value}".  }
  }

  /:table/column/:column { 
     |= { self dictionariesForQuery: "select {column} from {table}"| collect | at:column. } 
  }
  -tables {
	 self:. contents collect path collect: { :table | self:schema/{table}. }.
  }
  -<void>logTables {
     stdout do println: self tables each.	
  }
  -classForTable:tableInfo  {
  	  classDef := MPWClassDefinition new.
      classDef setName: tableInfo name capitalizedString.
      classDef setSuperclassName: 'NSObject'.
	  columns := tableInfo columns collect: { :oldColumn | 
			newName := oldColumn name lowercaseString.
			newInfo := ColumnInfo new.
			newInfo setName: newName.
            newInfo.
	  }.
      classDef setInstanceVariableDescriptions: columns.
      classDef.  
  }
}

extension NSObject {
	-initWithDictionary:aDict {
		aDict allKeys do:{ :key |
			self setValue: (aDict at:key) forKey:key.
		}.
		self.
	}
}


scheme:db := SQLiteScheme alloc initWithPath: dbref path.

artistsTable :=  scheme:db tables | at: 2
artistsClass :=  scheme:db classForTable:artistsTable.
stdout println: artistsClass name.
stdout println: artistsClass superclassName.
artistsClass defineClass.

shell runInteractiveLoop.
