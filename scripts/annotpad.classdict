<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>methodDict</key>
	<dict>
		<key>AnnotPadAppDelegate</key>
		<dict>
			<key>&lt;int&gt;application:app didFinishLaunchingWithOptions:optionsDict</key>
			<string>   self checkICloud.
   self window setRootViewController: self tabBarController. 
   self window makeKeyAndVisible.
   stdout := MPWByteStream Stdout.
   self startEventTap.
   1.
</string>
			<key>&lt;int&gt;theAnswer</key>
			<string>a := 12.

 a+302.

</string>
			<key>selectedViewController</key>
			<string> self window rootViewController  selectedViewController.</string>
		</dict>
		<key>FileListViewController</key>
		<dict>
			<key>&lt;int&gt;tableView:aTableView numberOfRowsInSection:&lt;int&gt;section</key>
			<string> self fileList count.

</string>
			<key>&lt;int&gt;thumbHeight</key>
			<string>   290</string>
			<key>&lt;int&gt;thumbWidth</key>
			<string>   self view  bounds width / 3 .</string>
			<key>&lt;void&gt;deleteFile:aFilename</key>
			<string>  stdout := MPWByteStream  Stdout.
  stdout println: 'delete: ',aFilename.
   stdout println: self thumbsView subviews.
 
 viewsToRemove := NSMutableArray array.
  self thumbsView subviews do: { :aView |
       aView filename = aFilename ifTrue: {
            viewsToRemove addObject: aView.
       }.
   }.
   aView := viewsToRemove objectAtIndex: 0.
   stdout println:'after checking views'.


           UIView animateWithDuration:0.4
           animations: { aView setAlpha: 0.0. }
           completion: { aView removeFromSuperview. 
                                   UIView animateWithDuration: 0.2
                                   animations: { 
        self thumbsView layoutSubviews. }
                                    completion: { 3  }. 
     stdout := MPWByteStream  Stdout.
  stdout println: 'completion : ',aFilename.
	 stdout println: self thumbsView subviews.}.

  NSFileManager defaultManager removeItemAtURL: (self urlForFile:aFilename) error: nil.
   (self thumbsView afterDelay: 0.3 ) setNeedsLayout.
</string>
			<key>&lt;void&gt;didTap:recognizer</key>
			<string>   stdout := MPWByteStream Stdout.
   location := recognizer locationInView: self view.
   yLoc :=  (location y / self thumbHeight) intValue * 3.
   xLoc :=  (location x / ( self thumbWidth )) intValue.
   
    stdout println:  location x .
   stdout println:  location y .
    stdout println:  xLoc.
    stdout println:  yLoc.
    stdout println:  yLoc + xLoc.

   self openFileAtIndex: yLoc + xLoc.
</string>
			<key>&lt;void&gt;openFile:aFilename</key>
			<string>   self switchToDocument.
   self openPDFDocumentWithURL:(self urlForFile:aFilename).
</string>
			<key>&lt;void&gt;openFileAtIndex:&lt;int&gt;anIndex</key>
			<string>   self switchToDocument.
   self openPDFDocumentWithURL:(self urlForFileAtIndex:anIndex).
</string>
			<key>&lt;void&gt;setupThumbsView:newView</key>
			<string>   </string>
			<key>fileAtIndex:&lt;int&gt;anIndex</key>
			<string> self fileList objectAtIndex:anIndex.


</string>
			<key>getThumbnailForFile:filename</key>
			<string>   self thumbs isNil ifTrue: {
        var:self/thumbs := NSCache alloc init autorelease.
    }.
    thumb := var:self/thumbs objectForKey:filename.
    thumb isNil ifTrue: {
	thumb := self readThumbnailForFile:filename.
         thumb isNil ifTrue: {
               thumb := self renderThumbnailForFile: filename.
               self writeThumbnail: thumb forFile: filename.
         }.
         var:self/thumbs setObject:thumb forKey: filename.
    }.
    thumb.
</string>
			<key>readThumbnailForFile:filename</key>
			<string>   path := self thumbsDirectory , '/', filename stringByDeletingPathExtension , '.png'.
  image := UIImage imageWithContentsOfFile: path.
   image.

   </string>
			<key>renderThumbnailForFile:filename</key>
			<string>   stdout := MPWByteStream Stdout.
   scale := UIScreen mainScreen scale.
   stdout println:'scale: ' , scale stringValue.  
   path := self documentDirectory , '/' , filename.
   stdout println: path.

   url := NSURL fileURLWithPath: path.
   doc := self documentWithURL: url.
   stdout println: doc.
   baseScale := 0.2.
   baseScale := baseScale * scale.

   bitmap := (doc pageAtIndex:0 ) asBitmapScaledBy: baseScale .
   stdout println: bitmap. 
   (scale &gt; 1.5)  ifTrue: { 
      bitmap := UIImage imageWithCGImage: bitmap CGImage scale:scale orientation:0.
   }.
   bitmap.

   </string>
			<key>thumbnailForFile:filename</key>
			<string>     self getThumbnailForFile: filename. 
</string>
			<key>writeThumbnail:thumbnail forFile:filename</key>
			<string>   stdout := MPWByteStream Stdout.

   path := self thumbsDirectory , '/' , filename stringByDeletingPathExtension.
   thumbnail scale &gt; 1.5 ifTrue: {
       path := path, '@2x'.
  }.
   path := path, '.png'.
   thumbnail pngRepresentation writeToFile: path atomically: 1.
   </string>
		</dict>
		<key>MPWPDFSCrollView</key>
		<dict>
			<key>&lt;int&gt;theAnswer</key>
			<string>  41.</string>
		</dict>
		<key>MPWPDFView</key>
		<dict>
			<key>&lt;int&gt;logDrawRect</key>
			<string> ^ 1.

</string>
			<key>originOffset</key>
			<string>  width := self bounds mpwSize x .
  documentWidth := self page mediaBox mpwSize x. 
  documentWidth := documentWidth * self myScale.
  xOffset := (width  - documentWidth  / 2).
  xOffset &lt; 0 ifTrue: { xOffset := 0 }.
xOffset  @ 0.
</string>
		</dict>
		<key>PDFMultiViewManager</key>
		<dict/>
		<key>PDFViewController</key>
		<dict>
			<key>&lt;void&gt;textFieldDidBeginEditing:textField</key>
			<string>s := (textField text componentsSeparatedByString:'/') objectAtIndex:0.
start := textField beginningOfDocument.
end   := textField positionFromPosition:start offset: s length -1.
r := textField textRangeFromPosition:start toPosition:end.
textField setSelectedTextRange:r.
</string>
			<key>labelFrame</key>
			<string>  s := self textLabelSize.
  midX := (self view frame mpwSize x / 2) - (s x / 2 ).
  labelFrame :=  midX @ ((self view frame mpwSize x - 300)) extent: (s x @ s y ) . 
  labelFrame.
</string>
			<key>makePageNumberLabel</key>
			<string>  labelFrame := self labelFrame.
  label := (UITextField alloc initWithFrame: labelFrame ) autorelease.
   label setText: self pageNumberInfo.
   label setFont: (UIFont systemFontOfSize: 55).
   label setUserInteractionEnabled: 1.
   label setDelegate: self.
   label setKeyboardType: 2.
  label.
</string>
			<key>pageNumberTemplate</key>
			<string> '%d %@ %d'.
</string>
			<key>showInfo</key>
			<string>
   self setInfo: self makePageNumberLabel.
   self info setAlpha:0.0.
   UIView beginAnimations:nil context:nil.
   UIView setAnimationDuration:0.3.
   self view addSubview:self info.
   self info setAlpha:1.0.
   UIView commitAnimations.
</string>
		</dict>
		<key>ThumbView</key>
		<dict>
			<key>&lt;void&gt;didTap:recognizer</key>
			<string>  stdout := MPWByteStream Stdout.
  stdout println:'tap on ThumbView'.
  self delegate editing ifTrue: {
           self delegate deleteFile:self filename.
  } ifFalse: {
	  self delegate openFile:self filename.
  }.
</string>
			<key>&lt;void&gt;drawOnContext:aContext</key>
			<string>  stdout := MPWByteStream Stdout.

  aFile := self filename. 
  aContext setFillColor: (aContext colorRed:0.5 green:0.5 blue:0.5 alpha:1.0) .
  aContext fillRect: self bounds . 


  aContext gsave.
  aContext setFillColor: (aContext colorGray:0.0 alpha:1.0).
  aContext setTextPosition:15 @  5.
  aContext show: aFile.
  aContext grestore.

  aContext gsave.
  image := self delegate thumbnailForFile: aFile.
  aContext translate: 10 : 20.
  aContext drawImage:image .
  self delegate editing ifTrue: { 
       aContext setStrokeColor:  (aContext colorRed:1 green:0 blue:0 alpha:1.0) .
       ( aContext rect:( 0 @ 0 extent: image size ) ) stroke.
   }.

  aContext grestore.

</string>
		</dict>
		<key>ThumbsView</key>
		<dict>
			<key>&lt;void&gt;drawOnContext:aContext</key>
			<string>
  aContext setFillColor: (aContext colorRed:0.5 green:0.5 blue:0.5 alpha:1.0) .
  aContext fillRect: self frame . 

</string>
			<key>&lt;void&gt;layoutSubviews</key>
			<string>
y := 0 . 
x := 30.

self subviews do: {  :thumb  |
       thumb setFrame: (x @ y extent: self delegate thumbWidth @ self delegate thumbHeight ).
       x := x + self delegate thumbWidth.
       x &gt;  (self bounds width - 20 ) ifTrue: { 
              y := y +  self delegate thumbHeight .
              x := 30.
	}.
}.

</string>
			<key>&lt;void&gt;reloadData</key>
			<string></string>
		</dict>
	</dict>
	<key>uniqueID</key>
	<string>0FEC25A5-A8B7-4EF3-B21C-C7B2D2DC0A54-3620-000010F67CA96F04</string>
</dict>
</plist>
